name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm ci
    - run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm ci
    - run: npm run build
    - uses: actions/upload-artifact@v3
      with:
        name: build
        path: .next

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build
        path: .next

    - name: Create deploy script
      run: |
        cat << EOF > deploy.sh
          #!/bin/bash

          set -e
          set -x

          LOG_FILE="/opt/myth/logs/deploy_$(date +%Y%m%d_%H%M%S).log"

          log_message() {
              echo "$(date): $1" | tee -a "$LOG_FILE"
          }

          cd /opt/myth/app/myth

          log_message "Installing dependencies"
          npm ci

          log_message "Building the application"
          npm run build 2>&1 | tee -a "$LOG_FILE"

          log_message "Starting/restarting the application"
          pm2 restart myth || pm2 start npm --name "myth" -- start

          log_message "Deployment completed"

          # Display the last 100 lines of the log
          tail -n 100 "$LOG_FILE"
        EOF

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      
    - name: Deploy to VM
      env:
        HOST: ${{ secrets.HOST }}
        DEPLOY_PATH: /opt/myth/app/myth
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        # Ensure the deploy directory exists
        ssh -o StrictHostKeyChecking=no sp-deploy@$HOST "mkdir -p $DEPLOY_PATH"
        
        # Copy the build artifacts and necessary files
        scp -r .next package.json package-lock.json sp-deploy@$HOST:$DEPLOY_PATH
        
        # Copy the deploy script
        scp deploy.sh sp-deploy@$HOST:$DEPLOY_PATH
        
        # Run the deployment script
        ssh -o StrictHostKeyChecking=no sp-deploy@$HOST << EOF
          cd $DEPLOY_PATH
          chmod +x deploy.sh
          ./deploy.sh
          echo "Deployment log:"
          cat /opt/myth/logs/deploy_*.log | tail -n 50
        EOF