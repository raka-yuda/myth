name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm ci
    - run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - run: npm ci
    - run: npm run build
    - uses: actions/upload-artifact@v3
      with:
        name: build
        path: .next

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: build
        path: .next

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock

    - name: Deploy to VM
      env:
        HOST: ${{ secrets.HOST }}
        DEPLOY_PATH: /opt/myth/app/myth
      run: |
        # Ensure the deploy directory exists
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null sp-deploy@$HOST "mkdir -p $DEPLOY_PATH"
        
        # Copy the build artifacts and necessary files
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r .next package.json package-lock.json sp-deploy@$HOST:$DEPLOY_PATH
        
        # Copy the updated deploy.sh script
        scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null deploy.sh sp-deploy@$HOST:$DEPLOY_PATH
        
        # Run the deployment script
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null sp-deploy@$HOST << EOF
          cd /opt/myth/scripts
          chmod +x deploy.sh
          ./deploy.sh
          echo "Deployment log:"
          cat /opt/myth/logs/deploy_*.log | tail -n 50
        EOF